syntax = "proto3";

option objc_class_prefix = "RTG";

package serverless_learn;

/* The API provided by a master. */
service Master {
  /* Register the birth of a worker. */
  rpc RegisterBirth(WorkerBirthInfo) returns (RegisterBirthAck) {}
}

/* Relevant information about a just-born worker. */
message WorkerBirthInfo {
  string addr = 1; // The worker's hostname and port.
}

/* An ack for a RegisterBirth call. */
message RegisterBirthAck {
  bool ok = 1; // Whether the birth was registered successfully.
}

/* The API provided by a file server. */
service FileServer {
	/* Do a push and return its outcome. */
	rpc DoPush(Push) returns (PushOutcome) {}

  /* Return a heartbeat indicating this FileServer is alive */
  rpc CheckUp(Empty) returns (LoadFeedback) {}
}

/* A requested push of a file to some recipient. */
message Push {
	string recipient_addr = 1; // The receipient's hostname and port.
	uint32 file_num = 2; // The number of the file to push.
}

/* The outcome of a requested push of a file to some recipient. */
message PushOutcome {
	bool ok = 1; // Whether the file was pushed successfully.
}

/* The API provided by a worker. */
service Worker {
  /* Receive a file for processing by the learning algorithm. */
  rpc ReceiveFile(stream Chunk) returns (ReceiveFileAck) {}

  /* Return a heartbeat indicating this Worker is alive */
  rpc CheckUp(PeerList) returns (FlowFeedback) {}
}

/* A chunk of a file */
message Chunk {
  bytes data = 1; // A continuous section of the file as raw bytes.
}

/* An ack for a ReceiveFile call. */
message ReceiveFileAck {
  bool ok = 1; // Whether the file was received successfully.
}

/* List of peer worker addresses */
message PeerList {
  repeated string peer_addrs = 1;
}

message FlowFeedback {
  // empty for now
}

message LoadFeedback {
  // empty for now
}

message Empty {
  // literally nothing
}